/*
 * This file is generated by jOOQ.
 */
package eu.dissco.core.handlemanager.jooqobjects.tables;


import eu.dissco.core.handlemanager.jooqobjects.Public;
import eu.dissco.core.handlemanager.jooqobjects.tables.records.ManualPidRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * PIDs from which the PID manager may pull
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ManualPid extends TableImpl<ManualPidRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.manual_pid</code>
     */
    public static final ManualPid MANUAL_PID = new ManualPid();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ManualPidRecord> getRecordType() {
        return ManualPidRecord.class;
    }

    /**
     * The column <code>public.manual_pid.pid</code>. Persistent identifier
     */
    public final TableField<ManualPidRecord, String> PID = createField(DSL.name("pid"), SQLDataType.CLOB, this, "Persistent identifier");

    /**
     * The column <code>public.manual_pid.prefix</code>. One of: TEST, SANDBOX,
     * 20.5000.1025, 10.3535
     */
    public final TableField<ManualPidRecord, String> PREFIX = createField(DSL.name("prefix"), SQLDataType.CLOB, this, "One of: TEST, SANDBOX, 20.5000.1025, 10.3535");

    private ManualPid(Name alias, Table<ManualPidRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ManualPid(Name alias, Table<ManualPidRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("PIDs from which the PID manager may pull"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.manual_pid</code> table reference
     */
    public ManualPid(String alias) {
        this(DSL.name(alias), MANUAL_PID);
    }

    /**
     * Create an aliased <code>public.manual_pid</code> table reference
     */
    public ManualPid(Name alias) {
        this(alias, MANUAL_PID);
    }

    /**
     * Create a <code>public.manual_pid</code> table reference
     */
    public ManualPid() {
        this(DSL.name("manual_pid"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public ManualPid as(String alias) {
        return new ManualPid(DSL.name(alias), this);
    }

    @Override
    public ManualPid as(Name alias) {
        return new ManualPid(alias, this);
    }

    @Override
    public ManualPid as(Table<?> alias) {
        return new ManualPid(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ManualPid rename(String name) {
        return new ManualPid(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ManualPid rename(Name name) {
        return new ManualPid(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ManualPid rename(Table<?> name) {
        return new ManualPid(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ManualPid where(Condition condition) {
        return new ManualPid(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ManualPid where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ManualPid where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ManualPid where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ManualPid where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ManualPid where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ManualPid where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ManualPid where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ManualPid whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ManualPid whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
